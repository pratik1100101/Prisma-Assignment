// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id        String   @id @default(uuid())
  password  String
  gmailAuth String
  userinfo  UserInfo @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model UserInfo {
  id                String     @id @default(uuid())
  firstName         String
  lastName          String
  email             String     @unique
  phone             String
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  deletedAt         DateTime?
  //  Account Account
  account           Account?
  artist            Artist?
  playlistsCreated  Playlist[] @relation(name: "createdByUserInfo")
  playlistsFollowed Playlist[]
}

model Artist {
  id               String      @id @default(uuid())
  monthlyListeners String
  userinfo         UserInfo    @relation(fields: [userId], references: [id])
  userId           String      @unique
  podcasts         Podcast[]
  audiobooks       Audiobook[]
  Single           Single[]
  Album            Album[]
}

model Podcast {
  id              String           @id @default(uuid())
  name            String
  episodes        String
  artistInfo      Artist           @relation(fields: [artistId], references: [id])
  studioIdInfo    Studio           @relation(fields: [studioId], references: [id])
  artistId        String
  podcastEpisodes PodcastEpisode[]
  studioId        String
}

model PodcastEpisode {
  id          String   @id @default(uuid())
  episodeName String
  credits     String
  podcastInfo Podcast  @relation(fields: [podcastId], references: [id])
  podcastId   String
  releaseDate DateTime
}

model Audiobook {
  id           String   @id @default(uuid())
  name         String
  credits      String
  artistInfo   Artist   @relation(fields: [artistId], references: [id])
  releaseDate  DateTime
  studioIdInfo Studio   @relation(fields: [studioId], references: [id])
  artistId     String
  studioId     String
}

model Playlist {
  id                String     @id @default(uuid())
  numberOfSingles   Int
  createdByUserInfo UserInfo   @relation(fields: [createdByUserId], references: [id], name: "createdByUserInfo")
  followers         UserInfo[]
  createdByUserId   String
  songs             Single[]
}

model Single {
  id             String     @id @default(uuid())
  singleName     String
  artistNameInfo Artist?    @relation(fields: [artistId], references: [id])
  albumIdInfo    Album?     @relation(fields: [albumId], references: [id])
  releaseDate    DateTime
  artistId       String?
  albumId        String?
  playlists      Playlist[]
}

model Album {
  id              String   @id @default(uuid())
  name            String
  numberOfSingles Int
  artistIdInfo    Artist   @relation(fields: [artistId], references: [id])
  artistId        String
  releaseDate     DateTime
  studioIdInfo    Studio   @relation(fields: [studioId], references: [id])
  credits         String
  singles         Single[]
  studioId        String
}

model Studio {
  id         String      @id @default(uuid())
  name       String
  email      String
  phone      String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  deletedAt  DateTime?
  albums     Album[]
  audiobooks Audiobook[]
  podcasts   Podcast[]
}
